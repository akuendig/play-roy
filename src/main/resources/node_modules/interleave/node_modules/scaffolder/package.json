{
  "name": "scaffolder",
  "description": "Helpers for making apps that scaffold stuff",
  "tags": [
    "scaffold"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@sidelab.com"
  },
  "version": "0.6.3",
  "engines": {
    "node": ">= 0.6.x < 0.9.0"
  },
  "dependencies": {
    "async": "0.1.x",
    "debug": "*",
    "nopt": "1.0.x",
    "out": "0.4.x",
    "read": "0.1.x",
    "squirrel": "0.1.x",
    "underscore": "1.3.x"
  },
  "pluginDependencies": {
    "mkdirp": "0.3.x",
    "ncp": "0.2.6"
  },
  "devDependencies": {
    "mocha": "1.2.x",
    "expect.js": "0.1.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/DamonOehlman/scaffolder.git"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/scaffolder/issues"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --reporter spec --timeout 10000"
  },
  "contributors": [],
  "optionalDependencies": {},
  "readme": "# Scaffolder\n\nScaffolder is a node package that is designed to make the process of making node CLI applications simpler.  The project is definitely a work in progress, and pull requests are definitely welcome.\n\n<a href=\"http://travis-ci.org/#!/DamonOehlman/scaffolder\"><img src=\"https://secure.travis-ci.org/DamonOehlman/scaffolder.png\" alt=\"Build Status\"></a>\n\n## Overview\n\nI've written quite a few cli tools using node now, and initially I used [commander](https://github.com/visionmedia/commander.js) a bit and then experimented with [my own cli focused library](https://github.com/DamonOehlman/climate).  Once I came across [nopt](https://github.com/isaacs/nopt) though everything changed, and I've been pretty much using it exclusively since.\n\nWhile nopt provides amazing option parsing functionality, there are things I do find myself doing again and again when writing cli apps.  Things such as:\n\n- copying particular files from one place to another\n- running blocks of code in response to the user requesting a particular action from the command line\n\nScaffolder is designed to ease the process of making CLI apps using node by adopting some conventions for writing your CLI app.\n\n## Writing a CLI application using Scaffolder\n\nThe first thing you should probably do if you are writing a CLI application in node, is to create a simple shell script that will run your application.  For my applications that make use of scaffolder such a script looks something like this:\n\n```\n#!/usr/bin/env node\nrequire('scaffolder')();\n```\n\nThis code is significantly less than what you would see in most shell scripts that kick off a node process and this is because of the conventions that Scaffolder uses.\n\n## Scaffolder Conventions\n\nBefore reading this section, I would encourage you to read the README for the [nopt](https://github.com/isaacs/nopt) package as some understanding of how nopt works will be helpful.\n\n### Command Handlers\n\nA CLI application built using scaffolder will likely be powered by a number of command handlers.  A command handler is simply a node module (usually located in the `lib/commands` folder for the project) that provides a number of exports that make the command work.  In the simplest case a command handler will look like this:\n\n```js\nexports.description = 'A test action';\nexports.run = function(opts, callback) {\n    callback(null, 'ok');\n};\n```\n\nTypically, though a command handler will use a variety of command-line flags to modify it's behaviour and these can be configured by providing an `args` export, e.g.\n\n```js\nexports.args = {\n    url:    'url',\n    path:   path\n};\n```\n\nThese arguments are defined as per standard [nopt](https://github.com/isaacs/nopt) options and an optional `shorthand` export can also be provided to provide shorthand equivalents for the defined options.\n\nOnce defined in the `args` export, any arguments that are parsed successfully from `process.argv` will be provided as part of the `opts` object that is passed into the `run` function declared in the command handler.\n\n## Scaffolder Helpers\n\nWhen running an action, scaffolder provides a number of helper methods for performing common tasks.\n\n### Copying Files\n\n```js\nscaffolder.copy(src, dst, callback);\n```\n\nThe `copy` method provides an interface to the really useful [ncp](https://github.com/AvianFlu/ncp) which can be used to copy all the files in `src` to `dst`.  The scaffolder `copy` method also ensures that the `dst` directory exists before starting the copy operation.\n\n__NOTE:__ The `src` path is relative to the npm package that has incorporated scaffolder (unless absolute), but `dst` path is relative to the cwd.",
  "_id": "scaffolder@0.6.3",
  "_from": "scaffolder@0.6.x"
}
